{"form":"",
  "title":"title",
  "text": "text",
  "before": "text = 12 + 14 \n",
  "vir":" a value ",
  "evaluator":"grade=100\nfeedback='bravo'",
  "__files": {
    "grader.py": "#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle, time\n\nfrom sandboxio import output, get_context, get_answers\n\n\nclass StopEvaluatorExec(Exception):\n    pass\n\n\ndef add_try_clause(code, excpt):\n    \"\"\"Add a try/except clause, excepting 'excpt' around code.\"\"\"\n    code = code.replace('\\t', '    ')\n    return (\"try:\\n\" + '\\n'.join([\"    \" + line for line in code.split('\\n')])\n            + \"\\nexcept \" + excpt.__name__ + \":\\n    pass\")\n\n\nmissing_evaluator_stderr = \"\"\"\\\nThe key 'evaluator' was not found in the context.\nWhen using this grader, the PL must declare a script inside a key 'evaluator'. This script have\naccess to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\n\nmissing_grade_stderr = \"\"\"\\\n'evaluator' did not declare the variable 'grade'.\nThe script have access to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 4:\n        msg = (\"Sandbox did not call grader properly:\\n\"\n               +\"Usage: python3 grader.py [input_json] [answer_jsonfile] [output_json]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n    \n    dic = get_context()\n    dic['response'] = get_answers()\n\n    if 'evaluator' in dic:\n        glob = {}\n        dic['StopEvaluatorExec'] = StopEvaluatorExec\n        exec(add_try_clause(dic['evaluator'], StopEvaluatorExec), dic)\n        exec(\"\", glob)\n        for key in glob:\n            if key in dic and dic[key] == glob[key]:\n                del dic[key]\n    else:\n        print(missing_evaluator_stderr, file=sys.stderr)\n        sys.exit(1)\n    \n    if 'grade' not in dic:\n        print(missing_grade_stderr, file=sys.stderr)\n        sys.exit(1)\n    \n    output(dic['grade'][0], dic['grade'][1], dic)\n\n\n",
    "builder.py": "#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle\nfrom sandboxio import get_context\n\nclass StopBeforeExec(Exception):\n    pass\n\n\ndef add_try_clause(code, excpt):\n    \"\"\"Add a try/except clause, excepting 'excpt' around code.\"\"\"\n    code = code.replace('\\t', '    ')\n    return (\"try:\\n    ...\\n\" + '\\n'.join([\"    \" + line for line in code.split('\\n')])\n            + \"\\nexcept \" + excpt.__name__ + \":\\n    pass\")\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        msg = (\"Sandbox did not call builder properly:\\n\"\n               +\"Usage: python3 builder.py [input_json] [output_json]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n    output_json = sys.argv[2]\n    \n    dic = get_context()\n\n    if 'before' in dic:\n        glob = {}\n        dic['StopBeforeExec'] = StopBeforeExec\n        print(add_try_clause(dic['before'], StopBeforeExec), file=sys.stderr)\n        exec(add_try_clause(dic['before'], StopBeforeExec), dic)\n        exec(\"\", glob)\n        for key in glob:\n            if key in dic and dic[key] == glob[key]:\n                del dic[key]\n    else:\n        print((\"Builder 'before' need a script declared in the key 'before'. \"\n               + \"See documentation related to this builder.\"),\n              file = sys.stderr)\n        sys.exit(1)\n\n    with open(output_json, \"w+\") as f:\n        f.write(jsonpickle.encode(dic, unpicklable=False))\n    \n    sys.exit(0)\n\n",
    "sandboxio.py": "# coding: utf-8\n\nimport sys, json, jsonpickle\nfrom components import Component\n\ndef get_answers():\n    \"\"\"Return a dictionnary containing every answer.\"\"\"\n    with open(sys.argv[2], \"r\") as f:\n        answers = json.load(f)\n    return answers\n\n\ndef get_context():\n    \"\"\"Return the dictionnary containing the context of the exercise.\"\"\"\n    with open(sys.argv[1], \"r\") as f:\n        context = json.load(f)\n    Component.sync_context(context)\n    return context\n\n\ndef output(grade, feedback, context=None):\n    \"\"\"Used to output the grade, feedback and context to the sandbox.\n    \n    Parameters:\n        grade - (int) Grade of the student. Should be an integer or implementing __int__.\n        feedback - (str) Feedback shown to the student. Should be a str or implementing __str__.\n        context - (dict - optionnal) Modified context of the exercise.\"\"\"\n    with open(sys.argv[3], \"w+\") as f:\n        context = context if context else get_context()\n        context[\"grade\"] = int(grade)\n        context[\"feedback\"] = feedback\n        f.write(jsonpickle.encode(context, unpicklable=False))\n    \n    sys.exit(0)\n\n"
  },
  "config":{
    "builder":null,
    "grader":{
      "commands":["python3 grader.py answer.json context.json"],
      "result_path":"context.json"
    }

  }
}